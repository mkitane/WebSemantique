[
    {
        "url": "http://elections.huffingtonpost.com/pollster/api", 
        "text": "The Pollster API provides programmatic access to the results of tens of thousands of opinion polls we've collected since 2004 as well as our estimates of the current opinion on various candidates and topics.\nThis API is for developers who want to incorporate our data into their own applications. To embed a chart on your site or download poll results as a spreadsheet, follow the links below each chart.     \nReturns a single chart, specified by a chart slug. The response includes both current and past estimates for each choice in the chart.\nOur polling data is organized into charts, collections of responses to related poll questions on a single subject and geography, like Obama's job approval in Florida or the Wisconsin Senate race between Tammy Baldwin and Tommy Thompson.\nFor each chart, we've calculated an estimate of the current opinion on that subject. Related charts are in turn organized into topics like Obama's job approval or the 2012 senate races.\n"
    }, 
    {
        "url": "http://support.sas.com/resources/papers/proceedings13/296-2013.pdf", 
        "text": ""
    }, 
    {
        "url": "http://pablobarbera.com/code/streamR.html", 
        "text": " package.\nClick here to read the documentation and here to read the vignettes.\nstreamR can be installed directly from CRAN, but the most updated version will always be on GitHub. The code below shows how to install from both sources.\n package, which can be saved in disk for future sessions:\n argument. We can use this function to, for instance, capture public statuses that mention Obama or Biden:\n function. As I expected, Obama is mentioned more often than Biden at the moment I created this post:\n argument. For more information, I would suggest to check Twitter's documentation for each parameter.\nHere's a quick example of how one would capture and visualize tweets sent from the United States:\n allows the user to capture a small random sample (around 1%) of all tweets that are being sent at each moment. This can be useful for different purposes, such as estimating variations in \u201cglobal sentiment\u201d or describing the average Twitter user. A quick analysis of the public statuses captured with this method shows, for example, that the average (active) Twitter user follows around 500 other accounts, that a very small proportion of tweets are geo-located, and that Spanish is the second most common language in which Twitter users set up their interface.\n, this function allows to subset tweets by keyword and location, and exclude replies across users who are not followed. An example is shown below. Perhaps not surprisingly, many of the accounts I follow use Twitter in Spanish.\n argument empty, but my personal preference is to save the raw text, usually in different files, one for each hour or day. Having the files means I can run UNIX commands to quickly compute the number of tweets in each period, since each tweet is saved in a different line:\nI hope this package is useful for R users who want to at least play around with this type of data. Future releases of the package will include additional functions to analyze captured tweets, and improve the already existing so that they handle errors better. My plan is to keep the GitHub version up to date fixing any possible bugs, and release only major versions to CRAN.\nYou can contact me at pablo.barbera[at]nyu.edu or via twitter (@p_barbera) for any question or suggestion you might have, or to report any bugs in the code.\n"
    }, 
    {
        "url": "http://code.google.com/p/google-gson/issues/detail?id=170", 
        "text": "Issue 170 -   google-gson -    unable to serialize an object with list of other objects -   A Java library to convert JSON to Java objects and vice-versa - Google Project Hosting  \n               My favorites \u25bc  | Sign in       \n   \n  \n      \n                         google-gson  \n      A Java library to convert JSON to Java objects and vice-versa    \n                    \n\n\n       Project\u00a0Home          Downloads                Issues            Source                  \n \n            New issue   \u00a0      Search    for                   \u00a0    Advanced search   \u00a0    Search tips   \u00a0    Subscriptions   \n \n               \n\n                                                       Issue 170:       unable to serialize an object with list of other objects            \n        11 people starred this issue and may be notified of changes.               Back to list       \n\n\n\n      Status:\u00a0      Duplicate       \nMerged:\u00a0    issue 231     \nOwner:\u00a0      ----         \nClosed:\u00a0    Aug 2010     \n            Type-Defect    \n              Priority-Medium    \n       \n\n       \n    \n\nSign in to add a comment\n          \n\u00a0                  Reported by     luca.marrocco,  Oct 30, 2009    \n  interface IPerson {    String getName();  }    public class Person implements IPerson {    private String name;    public Person() {\t    }\t    public Person(String name) {      this.name = name;    }    @Override    public String getName() {      return name;    }  }    public class People {    private List<IPerson> people = new LinkedList<IPerson>();    public People() {    }    public People(List<IPerson> people) {      this.people = people;    }    public List<IPerson> getPeople() {      return people;    }  }    @Test  public void testGsonProjects() {    People people = new People(asList((IPerson) new Person(\"Obama\")));    String json = new Gson().toJson(people);      System.out.println(json);  }    expected: {people:[{name:\"Obama\"}]}  actual  : {people:[{}]}    affected version: 1.3, 1.4 \n  \n                     Feb 15, 2010          \n                          #1     takayama...@gmail.com    I have not used asList() before, but I understand that that is to get a List backed  up by an Array. (It is a static method of an Array).    I can't see that the Person class is an Array. Doesn't the compiler report an error  on this code?    Also, isn't the syntax to be Array.asList<IPerson>(yourArray)?    Array<IPerson> peopleArray = new ArrayList<IPerson>(); // e.g.  peopleArray.add(new Person(\"Obama\"));  peopleList = Array.asList(peopleArray); // I have no idea how to get the list as a  LinkedList  People people = new People(peopleList);    Also, I think that you should move the \"private List<IPerson> people = new  ListnkedList<IPerson>();\" to inside \"public People()\". Because this new instance of  the List is not needed for the next constructor, i.e. public People(List...);    Probably you should just declare the member as \"private List<IPerson> people;\"       \n      \n                   Feb 16, 2010          \n                          #2     jevgenij...@gmail.com    Hello, thank you for your reply.    asList works (almost) if you do an static import of java.util.Arrays.*;  But anyway that is not the point.     Here is new test without the \"asList\" and GSON is not producing the expected result.    public void testGsonProjects() {    List<IPerson> personList = new LinkedList<IPerson>();    personList.add(new Person(\"Obama\"));    personList.add(new Person(\"Clinton\"));      People people = new People(personList);    String json = new Gson().toJson(people);    System.out.println(json);  }    Expected:  {\"people\":[{\"name\":\"Obama\"},{\"name\":\"Clinton\"}]}    Actual:  {\"people\":[{},{}]}    However, toJson(personList) produces:  [{\"name\":\"Obama\"},{\"name\":\"Clinton\"}]    This is very weird. \n      \n                   Feb 16, 2010          \n                          #4     daljeet....@gmail.com    i have the following code using json-lib    String response = put(command.toString());  JsonConfig jsonConfig = new JsonConfig();  jsonConfig.setExcludes(new String[]{\"cookie\", \"length\"});  final JSONArray jsonResponse = (JSONArray) JSONSerializer.toJSON(response,jsonConfig);    I have to rewrite this code on Android using gson.. I could not find a configurable  Json de-serialzer where i can write excludes as above. Does any one have any idea how  i can do so. \n      \n                   Feb 16, 2010          \n                          #5     takayama...@gmail.com    To: jevgenij.tsoi    Now your code has less error. To use a List in Gson, you have to declare the type of  the list to Gson. You either register it with Gson or give it as an argument to toJson().    It is documented here:    http://sites.google.com/site/gson/gson-user-guide#TOC-Collections-Examples \n      \n                   Feb 17, 2010          \n                          #6     jevgenij...@gmail.com    I am sorry, but that seems a bit strange.    Are you saying GSON cannot serialize Lists unless it know what type they are?  In that case (new Gson()).toJson(personList); should NOT produce a valid result.  but it does.    Let me sum it up:  Typed list as a member in an object -> the object is serialized but all the list  elements are empty \"{}\"    Untyped list as a member in an object -> works fine.    Typed list directly, without type info to Gson -> works fine.    How come the Untyped case works but the typed case does not?  It should default to the untyped case. Do you not agree?     \n      \n                   Feb 17, 2010          \n                          #7     jevgenij...@gmail.com    I am sorry, but that seems a bit strange.    Are you saying GSON cannot serialize Lists unless it know what type they are?  In that case (new Gson()).toJson(personList); should NOT produce a valid result.  but it does.    Let me sum it up:  Typed list as a member in an object -> the object is serialized but all the list  elements are empty \"{}\"    Untyped list as a member in an object -> works fine.    Typed list directly, without type info to Gson -> works fine.    How come the Untyped case works but the typed case does not?  It should default to the untyped case. Do you not agree?     \n      \n                   Feb 17, 2010          \n                        Project Member  #8     inder123    Gson can serialize it fine but will not be able to deserialize an untyped collection.    The Typed list in the code sample is declared as List<IPerson>. However, IPerson has   no fields (since it is an interface). Hence Gson serializes it as an empty object. In   the case of Untyped collection, Gson uses the actual class of the objects in the   collection, and is able to serialize them since it sees their fields.   \n      \n                   Feb 17, 2010          \n                          #9     takayama...@gmail.com    Oh, I did not realise that. Obviously I have not used it in the similar way before.    So, the solution is to declare the type of the list with a concrete class which has  implemented the interface? \n      \n                   Jun 3, 2010          \n                          #10     charles%...@gtempaccount.com    Sorry but I think the OP has a point that has still not been addressed.      Forgetting about de-serialization entirely for the time being, why does GSON   correctly serialize a typed collection when passed directly the the toJson() method,   but not when it is a member variable of a parent class?    If I have a List<Shape> that contains Circle objects, and serialize the list (using   GSON v1.4) the resulting JSON correctly includes the fields from the Shape (position)   and Circle (radius). However, if I add my List<Shape> as a member variable 'shapes'   of a Canvas object and serialise that, all I get is the positions and none of the   subclass fields.    If I need my list to contain Circles and Squares, I can't simple promote the list to   the correct concrete type as suggested here.    \n      \n                   Aug 27, 2010          \n                        Project Member  #11     limpbizkit    I've opened issue 231 to track the polymorphism issue.    In the interim, you'll have to work around this with a custom JsonSerializer. \n        \n  \n  \n      Status:  Duplicate    \nMergedinto:  231    \n\n  \n  \n  \n  \n    \n                   Oct 22, 2010          \n                          #12     jprudent@gmail.com    I had the same problem.    I had to patch the CollectionTypeAdapter because I couldn't register my own Adaptater on java.util.Collection. \n      \n             \n    \u25ba Sign in to add a comment     \n\n\n\n\n      \n \n       Terms -  Privacy -  Project Hosting Help  \n \n    Powered by Google Project Hosting  \n           \n\n"
    }, 
    {
        "url": "https://developers.google.com/news-search/v1/jsondevguide", 
        "text": "   The Google News Search API JSON interface can be used to write news query applications in any language that can handle a JSON-encoded result set with embedded status codes.  \n   The Google News Search JSON interface, and this guide, are provided for Flash developers, and all other developers who need to access News Search from other Non-JavaScript environments. \n   Applications that use this interface must abide by all existing Terms of Service. Most importantly, you must correctly identify yourself in your requests. \n   Query inputs and results must display \"Powered by Google\" branding, as described by .getBranding. \n   Requests can only be made on behalf of an end user. All results must be displayed. \n   Applications MUST always include a valid and accurate HTTP referer header in their requests.  \n parameter (not required, but highly encouraged). This parameter supplies the IP address of the end-user who made the request and validates that you are not making automated requests in violation of the Terms of Service. \n command line tool to execute sample queries. \ncurl -e http://www.my-ajax-site.com \\ 'https://ajax.googleapis.com/ajax/services/search/news?v=1.0&q=barack%20obama'\n of \n argument. When this argument is present, the JSON object is delivered as an argument to the specified callback.  \ncurl -e http://www.my-ajax-site.com \\ 'https://ajax.googleapis.com/ajax/services/search/news?v=1.0&q=barack%20obama&callback=processResults' \n parameter.  \nprocessResults({\"responseData\": {   \"results\": [     ...            // results array    ] }});\n. Note the slight difference in the following command and response. \ncurl -e http://www.your-site-here.com \\ 'https://ajax.googleapis.com/ajax/services/search/news?v=1.0& \\ q=barack%20obama&callback=processResults&context=foo'\n parameter.  \nprocessResults('foo',{  \"results\": [    ...          // results array  ] });\n   The following sections contain code snippets that show how to access the News Search API from Flash, Java, PHP, Python, and Perl.  \n   If you have trouble processing the JSON response, visit the JSON.org site, and pay particular attention to the second half of the page where various JSON libraries are referenced. See the JSON reference section below for details on how the News Search API is made available through the JSON API.  \n   The following code snippet shows how to make a request to the Google News Search API using Flash. This example uses JSON from the ActionScript 3.0 (AS3) Core Library. \nvar service:HTTPService = new HTTPService(); service.url = 'https://ajax.googleapis.com/ajax/services/search/news'; service.request.v = '1.0'; service.request.q = 'barack%20obama'; service.resultFormat = 'text'; service.addEventListener(ResultEvent.RESULT, onServerResponse);  // Make sure to set 'allowScriptAccess' to 'sameDomain' or 'always' in your // HTML include and import flash.external.ExternalInterface in this AS file. if (ExternalInterface.available) { try {   service.headers['Referer'] = ExternalInterface.call(\"window.location.href.toString\"); } catch (ignored:Error) {   service.headers['Referer'] = \"http://www.example.com\"; } }  service.addEventListener(ResultEvent.RESULT, onServerResponse); service.send();  private function onServerResponse(event:ResultEvent):void {   try {     var json:Object = JSON.decode(event.result as String);     // now have some fun with the results...   } catch(ignored:Error) {   } }\n The following code snippet shows how to make a request to the Google News Search API using Java. This example uses the JSON library from json.org.  \nURL url = new URL(\"https://ajax.googleapis.com/ajax/services/search/news?\" +                   \"v=1.0&q=barack%20obama&userip=INSERT-USER-IP\"); URLConnection connection = url.openConnection(); connection.addRequestProperty(\"Referer\", /* Enter the URL of your site here */);  String line; StringBuilder builder = new StringBuilder(); BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream())); while((line = reader.readLine()) != null) {  builder.append(line); }  JSONObject json = new JSONObject(builder.toString()); // now have some fun with the results...\n The following code snippet shows how to make a request to the Google News Search API using PHP. This sample assumes PHP 5.2. For older installations of PHP, refer to this comment.  \n $url = \"https://ajax.googleapis.com/ajax/services/search/news?\" .        \"v=1.0&q=barack%20obama&userip=INSERT-USER-IP\";  // sendRequest // note how referer is set manually $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_REFERER, /* Enter the URL of your site here */); $body = curl_exec($ch); curl_close($ch);  // now, process the JSON string $json = json_decode($body); // now have some fun with the results... \n The following code snippet shows how to make a request to the Google News Search API using Python. This sample assumes Python 2.4 or higher. You may need to download and install simplejson.  \n import urllib2 import simplejson  url = ('https://ajax.googleapis.com/ajax/services/search/news?' +        'v=1.0&q=barack%20obama&userip=INSERT-USER-IP')  request = urllib2.Request(url, None, {'Referer': /* Enter the URL of your site here */}) response = urllib2.urlopen(request)  # Process the JSON string. results = simplejson.load(response) # now have some fun with the results... \n module.  \n#!/usr/bin/perl  my $url = \"https://ajax.googleapis.com/ajax/services/search/news?\" +           \"v=1.0&q=barack%20obama&userip=INSERT-USER-IP\";  # Load our modules # Please note that you MUST have LWP::UserAgent and JSON installed to use this # You can get both from CPAN. use LWP::UserAgent; use JSON;  # Initialize the UserAgent object and send the request. # Notice that referer is set manually to a URL string. my $ua = LWP::UserAgent->new(); $ua->default_header(\"HTTP_REFERER\" => /* Enter the URL of your site here */); my $body = $ua->get($url);  # process the json string my $json = from_json($body->decoded_content);  # have some fun with the results my $i = 0; foreach my $result (@{$json->{responseData}->{results}}){  $i++;  print $i.\". \" . $result->{titleNoFormatting} . \"(\" . $result->{url} . \")\\n\";  # etc.... } if(!$i){  print \"Sorry, but there were no results.\\n\"; }\n   Unlike the core JavaScript interface, the JSON interface is exposed through a uniform URL that contains CGI arguments. Your application can use an HTTP stack of its choosing. In order to use the JSON interface:  \n   The standard URL for the Google News Search API is: \n   This section describes the arguments that can be used for News Search requests.  \n method.  \n   The following table lists the required URL arguments.  \nThis argument supplies the query, or search expression, that is passed into the searcher.\n   The following table lists the optional URL arguments. \n specifies the name of the function called in the response.\n. The new format is: \n is assumed.   \n     This argument supplies an integer from 1\u20138 indicating the number of results to return per page. \n property for a page may be used as a valid value for this argument. For reference, a sample cursor object is shown below: \n     This argument supplies the IP address of the end-user on whose behalf the request is being made. Requests that include it are less likely to be mistaken for abuse. In choosing to utilize this parameter, please be sure that you're in compliance with any local laws, including any laws relating to disclosure of personal information being sent.    \n arguments are not supplied, the response format is a simple JSON object: \n is an optional property that is present once a search completes successfully. When present, the property specifies how an application can request additional search results for the current query term, the estimated result count, the current page, and the URL for a search results page. The property has the following structure:  \n   The results array always contains the parameters listed in this section, even if the value is empty.  \n. When a related set of stories is available, the URL points to a landing page listing the related stories. \n is an optional property that is present once a search completes successfully. When present, the property specifies how an application can request additional search results for the current query term, the estimated result count, the current page, and the URL for a search results page. The property has the following structure:  \n   Supplies the root of an HTML element that may be cloned and attached somewhere into the application's DOM hierarchy. We expect that this is the primary property that applications will use, typically by cloning this node and attaching it to the DOM hierarchy. \n   We expect applications to control styling, as well as which elements are displayed, using CSS. For instance, we expect the following fragment to be common across all applications that wish to copy and paste search results delivered through the News Search API. \n   Warning: The image relates to the cluster of news articles for this result, not just the primary article. Therefore, you need to be careful to ensure that your user interface doesn't misrepresent the image. If you use this property, you must always display the news source of the article as well as the news source of the image; they are often different. For example, Google News displays the image next to the results with full attribution to the source. The image is hyperlinked to its associated article.  \n   This optional property indicates the language of the news story. \n   Supplies the published date (rfc-822 format) of the news story referenced by the associated search result. \n   Supplies the name of the publisher of the news story (e.g., \"Reuters\"). \n   This property is optional. It only appears in a result when the story also has a set of closely related stories. Each element within the array contains the following subset of properties also documented in this section:  \n \tSupplies the title of the news story returned as a search result. \n, this property is stripped of HTML markup (such as <b>, <i>, etc.). \n \tSupplies the raw result URL with non-alphanumeric characters. For example: \n contains a diagnostic string. \n argument as follows to request a JavaScript callback. \n callback({   \"responseData\" : {     \"results\" : [],     \"cursor\" : {}   },   \"responseDetails\" : null | string-on-error,   \"responseStatus\" : 200 | error-code }); \n arguments, the response is encoded as a JavaScript procedure call. In this mode of operation:  \n processResults(for',{  \"results\": [[   {    ...   },   {    ...   },   ...  ]],  \"cursor\": {   \"pages\": [[    ...   ]],   \"estimatedResultCount\": \"n\",   \"currentPageIndex\": n,   \"moreResultsUrl\": \"...\"  } } , 200 | error-code, null | string-on-error) \n   If you encounter problems with your code: \n"
    }, 
    {
        "url": "http://www.whitehouse.gov/developers/policy-snapshots-json-feed", 
        "text": " \t\tThis JSON feed provides data from the Policy Snapshots feature on WhiteHouse.gov. Each policy snapshot has two sections: Progress, which gives you a quick overview of the work President Obama has done since taking office, and What's Next, which helps you understand President Obama's plans for continuing the progress underway.\n \t\tURLs for the Snapshots JSON feed adhere to the following pattern...\n \t\tAs you can see, it accepts two arguments:\n \t\tThe valid arguments for Type are...\n \t\tThe valid arguments for Category match tags from the White House Issues taxonomy and currently include...\n \t\tExamples of valid URLs include...\n \t\tIf the Type or Category argument is missing or invalid, the module will default to \"all.\" For example, the following URL...\n \t\twill fail back to....\nLearn about WhiteHouse.gov's technology development by reading blog posts below. Send us feedback on our use of web technology and participation in the open source community.\nNew versions of the White House apps for the iPhone and Android were recently released after being rebuilt with several new features. For the first time, these apps are fully compatible with the iPad and Android tablets.\n@WHWeb brings you the latest on technology projects at the White House. #WHMobile #OpenSource #Drupal\n"
    }, 
    {
        "url": "http://jeroenjanssens.com/2013/09/19/seven-command-line-tools-for-data-science.html", 
        "text": "Update (7-17-2014) Check out my new book Data Science at the Command Line, which contains over 70 command-line tools for doing data science!\nData science is OSEMN (pronounced as awesome). That is, it involves Obtaining, Scrubbing, Exploring, Modeling, and iNterpreting data. As a data scientist, I spend quite a bit of time on the command-line, especially when there's data to be obtained, scrubbed, or explored. And I'm not alone in this. Recently, Greg Reda discussed how the classics (e.g., head, cut, grep, sed, and awk) can be used for data science. Prior to that, Seth Brown discussed how to perform basic exploratory data analysis in Unix.\n, those days are now in the past. \n, the tool transforms the incomprehensible API response we got:\ninto nicely indented and colored output:\n can also select, filter, and format JSON data, as illustrated by  the following command, which returns the name, cash, and party of each candidate that had at least $1,000,000 in cash:\nwill convert it to some nicely comma-separated values:\nLooks like the MySQL console doesn't it? Speaking of databases, you can insert the CSV data into an sqlite database as follows (many other databases are supported as well):\n is worth checking out. \n packages to select certain HTML elements by means of an XPath query or CSS selector. (I tried scrape.pl, but I couldn't get it to work properly. Moreover, rather than processing HTML from stdin, it expects a url and then downloads the HTML itself.) Let's extract the table from this Wikipedia article that lists the border and area ratio of each country.\n to convert correctly the HTML to JSON.\n and so forth.\n6. sample - when you're in debug mode\n might be useful.  The tool serves three purposes (which isn't very Unix-minded, but since it's mostly useful when you're in debug mode, that's not such a big deal). \n is to get a subset of the data by outputting only a certain percentage of the input on a line-by-line basis. The second purpose is to add some delay to the output. This comes in handy when the input is a constant stream (e.g., the Twitter firehose), and the data comes in too fast to see what's going on. The third purpose is to run only for a certain time. The following invocation illustrates all three purposes.\n). Once you're done debugging you can simply take it out of the pipeline.\nThis post wouldn't be complete without some R. It's not straightforward to make R/Rscript part of the pipeline since they don't  work with stdin and stdout out of the box. Therefore, as a proof of concept, I put together a bash script called Rio. \n option are executed. Third, the output of the last command is redirected to stdout.  Allow me to demonstrate three one-liners that use the Iris dataset (don't mind the url).\nDisplay the five-number-summary of each field.\n package will be imported. In case tthe output is a data frame, CSV will be written to stdout. This enables you to further process that data using other tools.\n as the data is initialized. If the final output is a ggplot object, a PNG will be written to stdout.\nI made this tool so that I could take advantage of the power of R on the command-line. Of course it has its limits, but at least there's no need to learn gnuplot any more.\nBelow is an uncurated list of tools and repositories that others have suggested via twitter or Hacker News (last updated on 23-09-2013 07:15 EST). Thanks everybody.\n. Combining such small tools into a larger pipeline is what makes them really powerful.\nI'm curious to hear what you think about this list and what command-line tools you like to use. Also, if you've made any tools yourself, you're more than welcome to add them to this data science toolbox. \n it. That's all there is to it. Who knows, you might even become interested in applying the Unix philosophy.\nWhile the power of the command-line should not be underestimated when it comes to Obtaining, Scrubbing, and Exploring data, it can only get you so far. When you're ready to do some more serious Exploring, Modelling, and iNterpretation of your data, you're probably better off continuing your work in a statistical computing environment, such as R or IPython notebook+pandas.\nIf you enjoyed this post, then you may be interested in my new book Data Science at the Command Line.\n"
    }, 
    {
        "url": "http://www.whitehouse.gov/developers", 
        "text": "\t-President Barack Obama\nDigital Government\n \t\tOn May 23, 2012, the President issued a directive entitled \u201cBuilding a 21st Century Digital Government\u201d. It launched a comprehensive Digital Government Strategy (pdf/html5) aimed at delivering better digital services to the American people. The strategy builds on several initiatives, including Executive Order 13571, Streamlining Service Delivery and Improving Customer Service, and Executive Order 13576, Delivering an Efficient, Effective, and Accountable Government.\nData.Gov\n \t\tAs part of President Obama's pledge for greater governmental transparency, Data.gov was launched in 2009 with 47 datasets of government information that was previously unavailable to the public. The\u00a0motivation was that this data belongs to the American people, who should not only have theinformation, but have the ability to use it. It was hoped that by tapping the collective knowledge of the American people, we could leverage this government asset to deliver more for millions of people. Today, there are more than 375,000 datasets available, which have been downloaded 2.9 million times. More than 1,250 governments apps have been developed using this data \u2013 103 of them are for mobile usage. Citizens have used the data to develop 236 apps.\nWe\u2019re making government data freely available in machine-readable formats so that innovators\u00a0and\u00a0entrepreneurs\u00a0can turn them into new products, services, and jobs. The feeds below provide access to data and content produced by the White House.\n \t\t\tThe We the People API currently provides read-only access to data within We the People, the White House petitions system. This API provides access to data on all petitions that passed the 150 signature threshold required to become publicly-available on the site. A bulk download of the same dataset is also available.\n \t\t\tThis document provides guidelines and examples for White House Web APIs, encouraging consistency, maintainability, and best practices across applications. Pull requests welcome.\n \t\t\tSpeeches & Events: Video / Audio (RSS / Podcast)\nWe believe in using and contributing back to open source software as a way of making it easier for the government to share data, improve tools and services, and return value to taxpayers. Below are a few of the projects that the White House has contributed back to the open source community.\nUser profile: whitehouse\nUser profile: whitehouse\nLearn about WhiteHouse.gov's technology development by reading blog posts below. Send us feedback on our use of web technology and participation in the open source community.\nNew versions of the White House apps for the iPhone and Android were recently released after being rebuilt with several new features. For the first time, these apps are fully compatible with the iPad and Android tablets.\n@WHWeb brings you the latest on technology projects at the White House. #WHMobile #OpenSource #Drupal\n"
    }, 
    {
        "url": "https://github.com/cs109/2014/blob/master/homework/HW2.ipynb", 
        "text": "2014/HW2.ipynb at master \u00b7 cs109/2014 \u00b7 GitHub\n     Skip to content                                  \n       Ignore     Learn more        Please note that GitHub no longer supports old versions of Firefox.\n       We recommend upgrading to the latest Safari, Google Chrome, or Firefox.\n   \n \n                                                            Sign up       Sign in     \n             \n   This repository\n      \n                     Explore           \n                        Features           \n                        Enterprise           \n                        Blog           \n       \n\n \n          \n                            \n                                       Star                50         \n                               Fork                       121            \n \n                      cs109   / 2014                                   \n       \n     \n                                                     Code             \n                             Issues                            \n                         Pull Requests                          \n     \n\n                    Pulse             \n                       Graphs             \n   \n                        HTTPS clone URL\n                       \n \n        Subversion checkout URL\n                       \n \n   You can clone with       HTTPS       or Subversion.            \n               Clone in Desktop                                                           Download ZIP                                \n         \n                       Permalink                     branch:     master                             Switch branches/tags                \n                             \n                                   Branches             \n                            Tags             \n           \n\n       \n                                                               gh-pages             \n                                            master             \n          \n            Nothing to show\n       \n                             \n          Nothing to show\n       \n       \n    \n  \n                              \n         2014     /  homework    /  HW2.ipynb   \n \n                   tmoon         Nov 7, 2014             lab 10 pushed         \n     \n                                 2            contributors                \n                       \n        \n                            executable file                      1131 lines (1131 sloc)                    37.596 kb       \n                           Raw             Blame           History         \n                                                                                           \n     \n                         {        \n          \"metadata\": {        \n           \"name\": \"\",        \n           \"signature\": \"sha256:151b229e81776daa0c324f9570f662a65d79d63f75a582b79118008267af5725\"        \n          },        \n          \"nbformat\": 3,        \n          \"nbformat_minor\": 0,        \n          \"worksheets\": [        \n           {        \n            \"cells\": [        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"# Homework 2: More Exploratory Data Analysis\\n\",        \n               \"## Gene Expression Data and Election Polls \\n\",        \n               \"\\n\",        \n               \"Due: Thursday, October 2, 2014 11:59 PM\\n\",        \n               \"\\n\",        \n               \"<a href=https://raw.githubusercontent.com/cs109/2014/master/homework/HW2.ipynb download=HW2.ipynb> Download this assignment</a>\\n\",        \n               \"\\n\",        \n               \"#### Submission Instructions\\n\",        \n               \"To submit your homework, create a folder named lastname_firstinitial_hw# and place your IPython notebooks, data files, and any other files in this folder. Your IPython Notebooks should be completely executed with the results visible in the notebook. We should not have to run any code. Compress the folder (please use .zip compression) and submit to the CS109 dropbox in the appropriate folder. If we cannot access your work because these directions are not followed correctly, we will not grade your work.\\n\",        \n               \"\\n\",        \n               \"\\n\",        \n               \"---\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"## Introduction\\n\",        \n               \"\\n\",        \n               \"John Tukey wrote in [Exploratory Data Analysis, 1977](http://www.amazon.com/Exploratory-Data-Analysis-Wilder-Tukey/dp/0201076160/ref=pd_bbs_sr_2/103-4466654-5303007?ie=UTF8&s=books&qid=1189739816&sr=8-2): \\\"The greatest value of a picture is when it forces us to notice what we never expected to see.\\\" In this assignment we will continue using our exploratory data analysis tools, but apply it to new sets of data: [gene expression](http://en.wikipedia.org/wiki/Gene_expression) and polls from the [2012 Presidental Election](http://en.wikipedia.org/wiki/United_States_presidential_election,_2012) and from the [2014 Senate Midterm Elections](http://en.wikipedia.org/wiki/United_States_Senate_elections,_2014).   \\n\",        \n               \"\\n\",        \n               \"**First**: You will use exploratory data analysis and apply the [singular value decomposition](http://en.wikipedia.org/wiki/Singular_value_decomposition) (SVD) to a gene expression data matrix to determine if the the date that the gene expression samples are processed has large effect on the variability seen in the data.  \\n\",        \n               \"\\n\",        \n               \"**Second**: You will use the polls from the 2012 Presidential Elections to determine (1) Is there a pollster bias in presidential election polls? and (2) Is the average of polls better than just one poll?\\n\",        \n               \"\\n\",        \n               \"**Finally**: You will use the [HuffPost Pollster API](http://elections.huffingtonpost.com/pollster/api) to extract the polls for the current 2014 Senate Midterm Elections and provide a preliminary prediction of the result of each state.\\n\",        \n               \"\\n\",        \n               \"#### Data\\n\",        \n               \"\\n\",        \n               \"We will use the following data sets: \\n\",        \n               \"\\n\",        \n               \"1. A gene expression data set called `exprs_GSE5859.csv` and sample annotation table called `sampleinfo_GSE5859.csv` which are both available on Github in the 2014_data repository: [expression data set](https://github.com/cs109/2014_data/blob/master/exprs_GSE5859.csv) and [sample annotation table](https://github.com/cs109/2014_data/blob/master/sampleinfo_GSE5859.csv).  \\n\",        \n               \"\\n\",        \n               \"2. Polls from the [2012 Presidential Election: Barack Obama vs Mitt Romney](http://elections.huffingtonpost.com/pollster/2012-general-election-romney-vs-obama). The polls we will use are from the [Huffington Post Pollster](http://elections.huffingtonpost.com/pollster).  \\n\",        \n               \"\\n\",        \n               \"3. Polls from the [2014 Senate Midterm Elections](http://elections.huffingtonpost.com/pollster) from the [HuffPost Pollster API](http://elections.huffingtonpost.com/pollster/api). \\n\",        \n               \"\\n\",        \n               \"---\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"## Load Python modules\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"# special IPython command to prepare the notebook for matplotlib\\n\",        \n               \"%matplotlib inline \\n\",        \n               \"\\n\",        \n               \"import requests \\n\",        \n               \"from StringIO import StringIO\\n\",        \n               \"import numpy as np\\n\",        \n               \"import pandas as pd # pandas\\n\",        \n               \"import matplotlib.pyplot as plt # module for plotting \\n\",        \n               \"import datetime as dt # module for manipulating dates and times\\n\",        \n               \"import numpy.linalg as lin # module for performing linear algebra operations\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 1        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"## Problem 1\\n\",        \n               \"\\n\",        \n               \"In this problem we will be using a [gene expression](http://en.wikipedia.org/wiki/Gene_expression) data set obtained from a [microarray](http://en.wikipedia.org/wiki/DNA_microarray) experiement [Read more about the specific experiment here](http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE5859).  There are two data sets we will use:  \\n\",        \n               \"\\n\",        \n               \"1. The gene expression intensities where the rows represent the features on the microarray (e.g. genes) and the columsns represent the different microarray samples.  \\n\",        \n               \"\\n\",        \n               \"2. A table that contains the information about each of the samples (columns in the gene expression data set) such as the sex, the age, the treatment status, the date the samples were processed.  Each row represents one sample. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 1(a) \\n\",        \n               \"Read in the two files from Github: [exprs_GSE5859.csv](https://github.com/cs109/2014_data/blob/master/exprs_GSE5859.csv) and [sampleinfo_GSE5859.csv](https://github.com/cs109/2014_data/blob/master/sampleinfo_GSE5859.csv) as pandas DataFrames called `exprs` and `sampleinfo`. Use the gene names as the index of the `exprs` DataFrame.\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 2        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Make sure the order of the columns in the gene expression DataFrame match the order of file names in the sample annotation DataFrame. If the order of the columns the `exprs` DataFrame do not match the order of the file names in the `sampleinfo` DataFrame, reorder the columns in the `exprs` DataFrame. \\n\",        \n               \"\\n\",        \n               \"**Note**: The column names of the gene expression DataFrame are the filenames of the orignal files from which these data were obtained.  \\n\",        \n               \"\\n\",        \n               \"**Hint**: The method `list.index(x)` [[read here](https://docs.python.org/2/tutorial/datastructures.html)] can be used to return the index in the list of the first item whose value is x. It is an error if there is no such item. To check if the order of the columns in `exprs` matches the order of the rows in `sampleinfo`, you can check using the method `.all()` on a Boolean or list of Booleans: \\n\",        \n               \"\\n\",        \n               \"Example code: `(exprs.columns == sampleinfo.filename).all()`\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 3        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Show the head of the two tables: `exprs` and `sampleinfo`. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": []        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 1(b)\\n\",        \n               \"\\n\",        \n               \"Extract the year and month as integers from the `sampleinfo` table. \\n\",        \n               \"\\n\",        \n               \"**Hint**: To convert a Series or a column of a pandas DataFrame that contains a date-like object, you can use the `to_datetime` function [[read here](http://pandas.pydata.org/pandas-docs/stable/timeseries.html)].  This will create a `DatetimeIndex` which can be used to extract the month and year for each row in the DataFrame. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 4        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 1(c)\\n\",        \n               \"\\n\",        \n               \"Convert the dates in the `date` column from the `sampleinfo` table into days since October 31, 2002. Add a column to the `sampleinfo` DataFrame titled `elapsedInDays` containing the days since October 31, 2002.  Show the head of the `sampleinfo` DataFrame which includes the new column.  \\n\",        \n               \"\\n\",        \n               \"**Hint**: Use the `datetime` module to create a new `datetime` object for the specific date October 31, 2002. Then, subtract the October 31, 2002 date from each date from the `date` column in the `sampleinfo` DataFrame. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 5        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 1(d)\\n\",        \n               \"\\n\",        \n               \"Use exploratory analysis and the singular value decomposition (SVD) of the gene expression data matrix to determine if the date the samples were processed has large effect on the variability seen in the data or if it is just ethnicity (which is confounded with date). \\n\",        \n               \"\\n\",        \n               \"**Hint**: See the end of the [lecture from 9/23/2014 for help with SVD](http://nbviewer.ipython.org/github/cs109/2014/blob/master/lectures/lecture07/data_scraping_transcript.ipynb). \\n\",        \n               \"\\n\",        \n               \"First subset the the `sampleinfo` DataFrame to include only the CEU ethnicity.  Call this new subsetted DataFrame `sampleinfoCEU`.  Show the head of `sampleinfoCEU` DataFrame. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 6        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Next, subset the `exprs` DataFrame to only include the samples with the CEU ethnicity. Name this new subsetted DataFrame `exprsCEU`. Show the head of the `exprsCEU` DataFrame. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 7        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Check to make sure the order of the columns in the `exprsCEU` DataFrame matches the rows in the `sampleinfoCEU` DataFrame.  \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 8        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Compute the average gene expression intensity in the `exprsCEU` DataFrame across all the samples. For each sample in the `exprsCEU` DataFrame, subtract the average gene expression intensity from each of the samples. Show the head of the mean normalized gene expression data.  \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 9        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Using this mean normalized gene expression data, compute the projection to the first Principal Component (PC1).  \\n\",        \n               \"\\n\",        \n               \"**Hint**: Use the `numpy.linalg.svd()` function in the `numpy.linalg` module (or the `scipy.linalg.svd()` function in the `scipy.linalg` module) to apply an [singular value decomposition](http://en.wikipedia.org/wiki/Singular_value_decomposition) to a matrix.  \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 10        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Create a histogram using the values from PC1.  Use a bin size of 25.  \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 11        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Create a scatter plot with the days since October 31, 2002 on the x-axis and PC1 on the y-axis.\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 12        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Around what day do you notice a difference in the way the samples were processed?\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 13        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer:\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"## Discussion for Problem 1\\n\",        \n               \"\\n\",        \n               \"*Write a brief discussion of your conclusions to the questions and tasks above in 100 words or less.*\\n\",        \n               \"\\n\",        \n               \"---\\n\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"## Problem 2: Is there a pollster bias in presidential election polls?\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 2(a)\\n\",        \n               \"\\n\",        \n               \"The [HuffPost Pollster](http://elections.huffingtonpost.com/pollster) contains many political polls. You can access these polls from individual races as a CSV but you can also access polls through the [HuffPost Pollster API](http://elections.huffingtonpost.com/pollster/api) to access the data.  \\n\",        \n               \"\\n\",        \n               \"Read in the polls from the [2012 Presidential Election: Barack Obama vs Mitt Romney](http://elections.huffingtonpost.com/pollster/2012-general-election-romney-vs-obama) into a pandas DataFrame called `election`. For this problem, you may read in the polls for this race directly using [the CSV file](http://elections.huffingtonpost.com/pollster/2012-general-election-romney-vs-obama.csv) available from the HuffPost Pollster page.\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 14        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Show the head of the `election` DataFrame. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 15        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"How many polls were conducted in November? Define this number as M.  \\n\",        \n               \"\\n\",        \n               \"**Hint**: Subset the `election` DataFrame for only dates in the `Start Date` column that are in November 2012.  \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 16        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer:\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"What was the median of the number of observations in the November polls? Define this quantity as N. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 17        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer: \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 2(b)\\n\",        \n               \"\\n\",        \n               \"Using the median sample size $N$ from Problem 1(a), simulate the results from a single poll:  simulate the number of votes for Obama out of a sample size $N$ where $p$ = 0.53 is the percent of voters who are voting for Obama.  \\n\",        \n               \"\\n\",        \n               \"**Hint**: Use the binomial distribution with parameters $N$ and $p$ = 0.53. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 18        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Now, perform a Monte Carlo simulation to obtain the estimated percentage of Obama votes with a sample size $N$ where $N$ is the median sample size calculated in Problem 2(a). Let $p$=0.53 be the percent of voters are voting for Obama. \\n\",        \n               \"\\n\",        \n               \"**Hint**: You will repeat the simulation above 1,000 times and plot the distribution of the estimated *percent* of Obama votes from a single poll.  The results from the single poll you simulate is random variable and will be different every time you sample. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 19        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Plot the distribution of the estimated percentage of Obama votes from your single poll. What is the distribution of the estimated percentage of Obama votes? \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 20        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer: \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"What is the standard error (SE) of the estimated percentage from the poll. \\n\",        \n               \"\\n\",        \n               \"**Hint**: Remember the SE is the standard deviation (SD) of the distribution of a random variable. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 21        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 2(c)\\n\",        \n               \"\\n\",        \n               \"Now suppose we run M polls where M is the number of polls that happened in November (calculated in Problem 2(a)). Run 1,000 simulations and compute the mean of the M polls for each simulation. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 22        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"What is the distribution of the average of polls?\\n\",        \n               \"\\n\",        \n               \"**Hint**: Show a plot. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 23        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer: \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"What is the standard error (SE) of the average of polls? \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 24        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer: \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Is the SE of the average of polls larger, the same, or smaller than that the SD of a single poll (calculated in Problem 2(b))? By how much?\\n\",        \n               \"\\n\",        \n               \"**Hint**: Compute a ratio of the two quantities.  \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 25        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer: \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 2(d) \\n\",        \n               \"\\n\",        \n               \"Repeat Problem 2(c) but now record the *across poll* standard deviation in each simulation. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 26        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"What is the distribution of the *across M polls* standard deviation?\\n\",        \n               \"\\n\",        \n               \"**Hint**: Show a plot. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 27        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer: \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 2(e) \\n\",        \n               \"\\n\",        \n               \"What is the standard deviation of M polls in our real (not simulated) 2012 presidential election data ? \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 28        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Is this larger, the same, or smaller than what we expeced if polls were not biased.\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 29        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer: \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 2(f)\\n\",        \n               \"\\n\",        \n               \"**For AC209 Students**: Learn about the normal approximation for the binomial distribution and derive the results of Problem 2(b) and 2(c) analytically (using this approximation). Compare the results obtained analytically to those obtained from simulations.\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 30        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer: \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"## Discussion for Problem 2\\n\",        \n               \"\\n\",        \n               \"*Write a brief discussion of your conclusions to the questions and tasks above in 100 words or less.*\\n\",        \n               \"\\n\",        \n               \"---\\n\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"## Problem 3: Is the average of polls better than just one poll?\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 3(a)\\n\",        \n               \"\\n\",        \n               \"Most undecided voters vote for one of the two candidates at the election. Therefore, the reported percentages underestimate the final value of both candidates. However, if we assume the undecided will split evenly, then the observed difference should be an unbiased estimate of the final difference. \\n\",        \n               \"\\n\",        \n               \"Add a new column to the `election` DataFrame containg the difference between Obama and Romeny called `Diff`. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 31        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 3(b)\\n\",        \n               \"\\n\",        \n               \"Make a plot of the differences for the week before the election (e.g. 5 days) where the days are on the x-axis and the differences are on the y-axis.  Add a horizontal line showing 3.9%: the difference between Obama and Romney on election day.\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 32        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 3(c) \\n\",        \n               \"\\n\",        \n               \"Make a plot showing the differences by pollster where the pollsters are on the x-axis and the differences on the y-axis. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 33        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Is the *across poll* difference larger than the *between pollster* difference? \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer: \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 3(d)\\n\",        \n               \"\\n\",        \n               \"Take the average for each pollster and then compute the average of that. Given this difference how confident would you have been of an Obama victory?\\n\",        \n               \"\\n\",        \n               \"**Hint**: Compute an estimate of the SE of this average based exclusively on the observed data. \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 34        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer: \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 3(e)\\n\",        \n               \"\\n\",        \n               \"**For AC209 Students**: Show the difference against time and see if you can detect a trend towards the end. Use this trend to see if it improves the final estimate.\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 35        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Answer: \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"## Discussion for Problem 3\\n\",        \n               \"\\n\",        \n               \"*Write a brief discussion of your conclusions to the questions and tasks above in 100 words or less.*\\n\",        \n               \"\\n\",        \n               \"---\\n\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"## Problem 4\\n\",        \n               \"\\n\",        \n               \"In this last problem, we will use the polls from the [2014 Senate Midterm Elections](http://elections.huffingtonpost.com/pollster) from the [HuffPost Pollster API](http://elections.huffingtonpost.com/pollster/api) to create a preliminary prediction of the result of each state. \\n\",        \n               \"\\n\",        \n               \"The HuffPost Pollster API allows you to access the data as a CSV or a JSON response by tacking \\\".csv\\\" or \\\".json\\\" at the end of the URLs. For example the 2012 Presidential Election could be accessed as a [.json](http://elections.huffingtonpost.com/pollster/2012-general-election-romney-vs-obama.json) instead of a [.csv](http://elections.huffingtonpost.com/pollster/2012-general-election-romney-vs-obama.csv)\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 4(a)\\n\",        \n               \"\\n\",        \n               \"Read in the polls for **all** of the 2014 Senate Elections using the HuffPost API. For example, we can consider the [2014 Senate race in Kentucky between Mitch McConnell and Alison Grimes](http://elections.huffingtonpost.com/pollster/2014-kentucky-senate-mcconnell-vs-grimes). \\n\",        \n               \"\\n\",        \n               \"To search for the 2014 Senate races, use the `topics` parameter in the API [[read more about topics here](http://elections.huffingtonpost.com/pollster/api)].  \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"url_str = \\\"http://elections.huffingtonpost.com/pollster/api/charts/?topic=2014-senate\\\"\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 36        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"To list all the URLs related to the 2014 Senate races using the pollster API, we can use a list comprehension:\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"election_urls = [election['url'] + '.csv' for election in requests.get(url_str).json()]\\n\",        \n               \"election_urls\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [        \n               {        \n                \"metadata\": {},        \n                \"output_type\": \"pyout\",        \n                \"prompt_number\": 37,        \n                \"text\": [        \n                 \"[u'http://elections.huffingtonpost.com/pollster/2014-kentucky-senate-mcconnell-vs-grimes.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-arkansas-senate-cotton-vs-pryor.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-michigan-senate-land-vs-peters.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-louisiana-senate-cassidy-vs-landrieu.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-new-hampshire-senate-brown-vs-shaheen.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-west-virginia-senate-capito-vs-tennant.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-new-hampshire-senate-bass-vs-shaheen.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-north-carolina-senate-tillis-vs-hagan.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-virginia-senate-gillespie-vs-warner.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-colorado-senate-gardner-vs-udall.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-illinois-senate-oberweis-vs-durbin.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-alaska-senate-sullivan-vs-begich.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-iowa-senate-ernst-vs-braley.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-mississippi-senate-cochran-vs-childers.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-oregon-senate-wehby-vs-merkley.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-georgia-senate-perdue-vs-nunn.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-louisiana-senate-sasse-vs-domina.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-south-dakota-senate-rounds-vs-weiland.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-maine-senate-collins-vs-bellows.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-minnesota-senate-mcfadden-vs-franken.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-texas-senate-cornyn-vs-alameel.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-south-carolina-senate-graham-vs-hutto.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-south-carolina-senate-scott-vs-dickerson.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-oklahoma-senate-inhofe-vs-silverstein.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-new-mexico-senate-weh-vs-udall.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-new-jersey-senate-bell-vs-booker.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-idaho-senate-risch-vs-mitchell.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-tennessee-senate-alexander-vs-ball.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-wyoming-senate.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-kansas-senate-roberts-vs-orman-vs-taylor.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-hawaii-senate-cavasso-vs-schatz.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-oklahoma-senate-lankford-vs-johnson.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-montana-senate-daines-vs-curtis.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-rhode-island-senate-zaccaria-vs-reed.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-massachusetts-senate-herr-vs-markey.csv',\\n\",        \n                 \" u'http://elections.huffingtonpost.com/pollster/2014-delaware-senate-wade-vs-coons.csv']\"        \n                ]        \n               }        \n              ],        \n              \"prompt_number\": 37        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Because there so many Senate races, we can create a dictionary of pandas DataFrames that will be keyed by the name of the election (a string). \"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"def build_frame(url):\\n\",        \n               \"    \\\"\\\"\\\"\\n\",        \n               \"    Returns a pandas DataFrame object containing\\n\",        \n               \"    the data returned from the given url\\n\",        \n               \"    \\\"\\\"\\\"\\n\",        \n               \"    source = requests.get(url).text\\n\",        \n               \"    \\n\",        \n               \"    # Use StringIO because pd.DataFrame.from_csv requires .read() method\\n\",        \n               \"    s = StringIO(source)\\n\",        \n               \"    \\n\",        \n               \"    return pd.DataFrame.from_csv(s, index_col=None).convert_objects(\\n\",        \n               \"            convert_dates=\\\"coerce\\\", convert_numeric=True)\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 38        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"# Makes a dictionary of pandas DataFrames keyed on election string.\\n\",        \n               \"dfs = dict((election.split(\\\"/\\\")[-1][:-4], build_frame(election)) for election in election_urls)\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 39        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"Show the head of the DataFrame containing the polls for the 2014 Senate race in Kentucky between McConnell and Grimes.\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 40        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"#### Problem 4(b)\\n\",        \n               \"\\n\",        \n               \"For each 2014 Senate race, create a preliminary prediction of the result for that state.\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [        \n               \"#your code here\"        \n              ],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": [],        \n              \"prompt_number\": 42        \n             },        \n             {        \n              \"cell_type\": \"markdown\",        \n              \"metadata\": {},        \n              \"source\": [        \n               \"# Submission Instructions\\n\",        \n               \"\\n\",        \n               \"To submit your homework, create a folder named **lastname_firstinitial_hw#** and place your IPython notebooks, data files, and any other files in this folder. Your IPython Notebooks should be completely executed with the results visible in the notebook. We should not have to run any code.  Compress the folder (please use .zip compression) and submit to the CS109 dropbox in the appropriate folder. *If we cannot access your work because these directions are not followed correctly, we will not grade your work.*\\n\"        \n              ]        \n             },        \n             {        \n              \"cell_type\": \"code\",        \n              \"collapsed\": false,        \n              \"input\": [],        \n              \"language\": \"python\",        \n              \"metadata\": {},        \n              \"outputs\": []        \n             }        \n            ],        \n            \"metadata\": {}        \n           }        \n          ]        \n         }        \n\n\n    \n \n             \n        \n       \n     \n   \n       \n                Status\n       API\n       Training\n       Shop\n       Blog\n       About\n      \n                  \u00a9 2014 GitHub, Inc.\n         Terms\n         Privacy\n         Security\n         Contact\n     \n\n \n                      \n   \n                                        \n \n                             Something went wrong with that request. Please try again.     \n     \n\n"
    }, 
    {
        "url": "http://sunlightlabs.github.io/Capitol-Words/", 
        "text": "This documentation is for Version 1 of the Capitol Words API. Version 1 is currently the only version, and is actively maintained.\nListed below are the public methods currently supported by the Capitol Words API. All requests must be signed with a valid Sunlight labs API key. You can register for one here: http://services.sunlightlabs.com/accounts/register\nSunlight API discussion takes place at the sunlightlabs-api-discuss google group. You can ask questions there, as well as alert the maintainers of bugs. If you have specific issues with the Capitol Words API, you can open a ticket directly at github.\nAll endpoints below are relative to the API root:\nhttp://capitolwords.org/api /1\nSo, to make a request to the dates.json endpoint, you'd use a url that looks like this:\nAll of the endpoints pulling from Solr support a set of standard arguments, all of which are optional. Endpoints with support for standard arguments will be flagged as such below.\n  Limit results to members of Congress from the given state.\n  Valid values: 2-letter state abbreviation, such as MD, VA, DC.\n  Limit results to members of Congress from the given party.\n  Valid values: R, D, I\n  The chamber to search. Default includes House, Senate and extensions of   remarks.\n  Valid values:\n  Show results for only the given date.\n  Limit results to those on or after the given date.\n  Limit results to those on or before the given date.\n/dates.json\nFind the popularity of a phrase over a period of time. Standard arguments are supported.\n  The phrase to search for.\n  Limit results to the member of Congress with the given Bioguide ID.\n  Only return results where mentions are at or above the supplied threshold\n  Include the percentage of mentions versus total words in the result   objects.\n  Valid values: true, false (default).\n  The length of time covered by each result.\n  Valid values:\nGet a list of how many times the phrase \"united states\" appears in the Congressional Record on each day in the most recent Congress:\nGet a list of how many times the phrase \"united states\" was said by legislators from Virginia on each day of the most recent Congress:\nGet a list of how many times the phrase \"united States\" appears in the Congressional Record on each day between Jan. 1, 2010, and June 1, 2010:\nGet a list of how many times the phrase \"united states\" appears in the Congressional Record in each month between January and June, 2010:\nReturns a list of date objects with associated mention data.\n{     \"results\": [         {             \"count\": 14.0,             \"percentage\": 0.058309037900874633,             \"total\": 24010,             \"day\": \"1996-01-02\",             \"raw_count\": 14.0         },         {             \"count\": 122.0,             \"percentage\": 0.067791336044986786,             \"total\": 179964,             \"day\": \"1996-01-04\",             \"raw_count\": 122.0         },         {             \"count\": 198.0,             \"percentage\": 0.13499693188791165,             \"total\": 146670,             \"day\": \"1996-01-05\",             \"raw_count\": 198.0         },         {             \"count\": 1.0,             \"percentage\": 0.098135426889106966,             \"total\": 1019,             \"day\": \"1996-01-08\",             \"raw_count\": 1.0         },         ...snip...     ] }\n/phrases.json\nList the top phrases for a facet.\n  The entity type to get top phrases for.\n  Valid values:\n  The value of the entity given in entity_type. Formats are as follows:\n  The size of phrase, in words, to search for (up to 5).\n  The page of results to show.\n  100 results are shown at a time. To get more than 100 results, use the   page parameter.\n  The metric and direction to sort by.\n  Valid values:\nList the top words in July 2010 by count:\nList the top words for Nevada:\nList the top words for Barbara Lee:\nReturns a list of phrases with tf-idf and count data.\n[     {         \"tfidf\": 3.8596557124800003e-05,         \"count\": 5373,         \"ngram\": \"people\"     },     {         \"tfidf\": 1.30267768302e-05,         \"count\": 3637,         \"ngram\": \"one\"     },     {         \"tfidf\": 2.52066478599e-05,         \"count\": 3509,         \"ngram\": \"jobs\"     },     {         \"tfidf\": 1.17409333103e-05,         \"count\": 3278,         \"ngram\": \"american\"     },     ...snip... ]\n/phrases/:entity.json\nGet the top (legislator|state|party|bioguide_id|volume|chamber)s for a phrase. Standard arguments are supported.\n  The phrase to search for.\n  Only return results where mentions are at or above the supplied threshold\n  The number of results to return per page. The maximum is 50.\n  The page number to return.\n  The metric on which to sort top results.   Note: Facet sorts in Solr are alphabetically ascending by facet or descending   by count. The only valid values you can provide are 'count' or :entity.\nList the top 10 legislators for the phrase 'free market' by raw count:\nFind the chamber that says 'salary increase' the most:\nReturns a list of entity objects with associated count data.\n{     \"results\": [         {             \"count\": 41.0,             \"chamber\": \"House\"         },         {             \"count\": 35.0,             \"chamber\": \"Senate\"         },         {             \"count\": 9.0,             \"chamber\": \"Extensions\"         }     ] }\n/text.json\nFull-text search. Standard arguments are supported\nNo single argument is required to this endpoint; however, at least one of the text search arguments should be supplied.\n  A phrase to search the body of each CR document for.\n  A phrase to search the title of each CR document for.\n  Limit results to the member of Congress with the given Bioguide ID.\n  The pages in the Congressional Record to search.\n  The page of results to show, 50 results are shown at a time.\n  The value on which to sort the results. Options for this endpoint are:\nGet a list of pieces of text with the phrase \"obama administration\" in them:\nGet a list of pieces of text by Republicans with the phrase \"health care debate\" in them:\nReturns a list of CR Documents and the total number found.\n"
    }
]