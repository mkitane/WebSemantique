// Generated by CoffeeScript 1.8.0
(function() {
  var Duplex, StringStream, sstream, util;

  util = require('util');

  Duplex = require('stream').Duplex;

  StringStream = function(value, options) {
    Duplex.call(this, options);
    this.value = value || '';
    this.defaultEncoding = (options != null ? options.encoding : void 0) || 'utf8';
    return this.decodeStrings = (options != null ? options.decodeStrings : void 0) || false;
  };

  util.inherits(StringStream, Duplex);

  Object.defineProperties(StringStream.prototype, {
    value: {
      get: function() {
        return this._value;
      },
      set: function(newValue) {
        this._value = newValue;
        return this._value;
      }
    }
  });

  StringStream.prototype._write = function(chunk, encoding, cb) {
    encoding = encoding || this.defaultEncoding;
    if (encoding !== this.encoding) {
      chunk = chunk.toString(this.defaultEncoding);
    }
    this.value += chunk;
    return typeof cb === "function" ? cb() : void 0;
  };

  StringStream.prototype._read = function() {
    this.push(this.value, this.defaultEncoding);
    return this.push(null);
  };

  StringStream.prototype.toString = function() {
    return this.value;
  };

  StringStream.prototype.transform = function(fn) {
    this.value = fn(this.value);
    return this;
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = StringStream;
  }

  if (!(typeof module !== "undefined" && module !== null ? module.parent : void 0)) {
    sstream = new StringStream('Hello, World!!!');
    sstream.pause();
    console.log("sstream is a StringStream which has a value of '" + sstream.value + "'");
    sstream.write(" I am a StringStream, that is, I am a String but I'm also a Stream!");
    sstream.on('end', function() {
      return console.log('sstream ended');
    });
    sstream.on('data', function(data) {
      return console.log('sstream.sent:', data.toString('utf8'));
    });
    console.log("Now wait 3 seconds, please...");
    setTimeout((function() {
      return sstream.resume();
    }), 3000);
  }

}).call(this);
